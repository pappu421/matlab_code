%%graphical

clc;

A = [ 1 2
      1 1
      0 1 ];

B = [ 2000 ; 1500 ; 600 ];

C = [ 3 5 ]';

x = 0:400:max(B);

% constraints
y1 = (B(1) - A(1,1)*x)/A(1,2);
y2 = (B(2) - A(2,1)*x)/A(2,2);
y3 = (B(3) - A(3,1)*x)/A(3,2);

y1 = max(0,y1);
y2 = max(0,y2);
y3 = max(0,y3);

%plot the graph 

plot(x,y1,'r',x,y2,'b',x,y3,'k');

%plot the graph

legend('y1','y2','y3');
xlabel('value of x1');
ylabel('value of x2');

%find indices where value is 0 

py1 = find( y1 == 0 );
py2 = find( y2 == 0 );
py3 = find( y3 == 0 );
px  = find (x == 0);  % always 1
% , because the index of 0 in x is 1 as mostly it is  


%finding the corner points 

line1 = [x(:,[py1 , px]) ; y1(:,[py1 , px])]'
line2 = [x(:,[py2 , px]) ; y2(:,[py2 , px])]'
line3 = [x(:,[py3 , px]) ; y3(:,[py3 , px])]'

points = unique([line1;line2;line3],'rows')


 %finding the intersecting points 

pt = [0 ; 0];
for i=1:size(A,1)
     A1 = A(i,:);
     B1 = B(i,:);
     for j=i+1:size(A,1)
        A2 = A(j,:);
        B2 = B(j,:);
        Anew=[A1;A2];
        Bnew=[B1;B2];
        X = Anew\Bnew;
        pt = [X  pt];
     end
end

ptt=pt';

%Write all the points that may make feasible region 

aapt = [ptt ; points];
poin = unique(aapt , 'rows');


%select the points that actually making region 
ATT = constraintss(poin); 
ATT = unique(ATT , "rows");

% obj value 

for i=1:size(ATT,1)
    FX(i,:) = sum(ATT(i,:) * C);
end

%printing soluton 
k=[ATT FX]

            
%% constraintss file of graphical (file name should be same as function name)

function out  = constraintss(X) 
    X1 = X(:,1);
    X2 = X(:,2);
    cons1 = X1 + 2*X2 - 2000;
    T= find(cons1>0);
    X(T,:) = [];

    X1 = X(:,1);
    X2 = X(:,2);
    cons2 = X1 + X2 - 1500;
    T= find(cons2>0);
    X(T,:) = [];



    X1 = X(:,1);
    X2 = X(:,2);
    cons3 = X1 + 2*X2 - 2000;
    T= find(cons3>0);
    X(T,:) = [];

    out = X;

end











%% basic feasible 
%matices
A = [ 2  3  -1  4 ; 1 -2   6 -7 ];

B = [8 -3]';
C = [2 3 4 7]';

%number of variable and constraints
n = size(A,2);   % length of second dimension
m = size(A,1);   % length of ist dimension 

%checking condition 
if n>m
    
    % combinations of variables

    % this will give no. of ways not ways 
    no = nchoosek(n , m);

    %indices of the combination  
    ncm = nchoosek(1:n, m);

    s = zeros(1,size(A,2));
    for i=1:no 
        y = zeros(n,1);
        X = A(:,ncm(i,:))\B;
        
        %check feasiblility
        if all(X>0)

            y(ncm(i,:)) = X;
            s  = [s ; y'];

        end

    end
end  

%clculate objective function
fx = s * C;

%write solutions 
kt = [s fx]

    








